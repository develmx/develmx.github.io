<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Devel.MX</title>
    <link>http://develmx.github.io/post/index.xml</link>
    <description>Recent content in Posts on Devel.MX</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Powered by [Hugo](//gohugo.io). Theme by [PPOffice](http://github.com/ppoffice).</copyright>
    <lastBuildDate>Wed, 15 Feb 2017 23:40:03 -0600</lastBuildDate>
    <atom:link href="http://develmx.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Actualización a Dart 1.22</title>
      <link>http://develmx.github.io/2017/02/15/actualizaci%C3%B3n-a-dart-1_22</link>
      <pubDate>Wed, 15 Feb 2017 23:40:03 -0600</pubDate>
      
      <guid>http://develmx.github.io/2017/02/15/actualizaci%C3%B3n-a-dart-1_22</guid>
      <description>

&lt;p&gt;( Post traducido de &lt;a href=&#34;http://news.dartlang.org/2017/02/dart-122-faster-tools-assert-messages.html&#34;&gt;http://news.dartlang.org/2017/02/dart-122-faster-tools-assert-messages.html&lt;/a&gt; )&lt;/p&gt;

&lt;p&gt;Como característica de un lenguaje vivo, de vez en cuando un lenguage tiene modificaciones que mejoran la calidad del lenguaje&lt;/p&gt;

&lt;h2 id=&#34;inicio-más-rápido-de-herramientas&#34;&gt;Inicio más rápido de herramientas&lt;/h2&gt;

&lt;p&gt;Los archivos compilados de Dart tienen la peculiaridad de inicar mucho muy rápido porque tienen implementada una funcionalidad llamada &lt;em&gt;snapshots&lt;/em&gt;, la cual consiste en que el estado inicial de la aplicación queda en el compilado al inicio del codigo asi al leerlo por el intérprete automáticamente puede iniciar la ejecución.&lt;/p&gt;

&lt;p&gt;Y ahora han portado esta funcionalidad para las herramientas del SDK como el dart2js, el analyzer, y el pub. Y el resultado es increíble.&lt;/p&gt;

&lt;p&gt;Comparación de los tiempo después de la mejora:
&lt;img src=&#34;http://develmx.github.io/images/chart001.png&#34; alt=&#34;alt text&#34; title=&#34;Chart de las mejoras&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.youtube.com/watch?v=lqE4u8s8Iik&#34;&gt;&lt;img src=&#34;http://img.youtube.com/vi/lqE4u8s8Iik/0.jpg&#34; alt=&#34;Mas informacion sobre AOT compilling&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;mensajes-de-assert&#34;&gt;Mensajes de Assert&lt;/h2&gt;

&lt;p&gt;El principio de falla rapido es fundamental para hacer software de alta calidad y en dart, &lt;a href=&#34;https://www.dartlang.org/guides/language/language-tour#assert&#34;&gt;Assert&lt;/a&gt;
es la mejor manera de fallar rápido. Pero hasta ahora no era posible agregar un mensaje a los aserts, al menos que se tuvieran que hacer una secuencia de &lt;code&gt;Throw&lt;/code&gt; errors
pero ahora son mucho más fáciles, como se puede ver a continuación:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;num measureDistance(List&amp;lt;Place&amp;gt; waypoints) {
  assert(waypoints.any((point) =&amp;gt; point.isInaccessible),
         &#39;At least one waypoint is inaccessible.&#39;);
  // ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Y lo mejor al momento ejecutar en producción los Asserts no son evaluados lo que hace el proceso más rápido
&lt;img src=&#34;http://develmx.github.io/images/realease-1.22.gif&#34; alt=&#34;Asert Covariant example&#34; title=&#34;Asert Covariant example&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;el-tipo-null-ahora-es-un-subtipo-de-cualquier-tipo-de-datos&#34;&gt;El tipo &lt;code&gt;Null&lt;/code&gt; ahora es un subtipo de cualquier tipo de datos&lt;/h2&gt;

&lt;p&gt;Osea se a movido el Tipo &lt;code&gt;Null&lt;/code&gt; a la base de la jerarquía de todas las clases. Antes el &lt;code&gt;null&lt;/code&gt; estaba en el fondo de los tipos ahora la clase &lt;code&gt;Null&lt;/code&gt; también.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;final empty = &amp;lt;Null&amp;gt;[];

String concatenate(List&amp;lt;String&amp;gt; parts) =&amp;gt; parts.join();
int sum(List&amp;lt;int&amp;gt; numbers) =&amp;gt; numbers.fold(0, (sum, n) =&amp;gt; sum + n);

concatenate(empty); // OK.
sum(empty); // OK.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Y mÁs cambios que se pueden consultar en el post original.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Las peores contraseñas del 2016</title>
      <link>http://develmx.github.io/2017/02/04/las-peores-conrase%C3%B1as-del-2016</link>
      <pubDate>Sat, 04 Feb 2017 23:41:17 -0600</pubDate>
      
      <guid>http://develmx.github.io/2017/02/04/las-peores-conrase%C3%B1as-del-2016</guid>
      <description>&lt;p&gt;En el 2007 se decía que el 1% de la población era dueña del 35% de &lt;a href=&#34;https://en.wikipedia.org/wiki/Wealth_inequality_in_the_United_States&#34;&gt;Estados Unidos&lt;/a&gt;. Es poco común que existan estas disparidades tan exageradas en muchas áreas pero hoy hablaremos de una donde mucho menos del 1% del Universo de Búsqueda afecta el 50%.&lt;/p&gt;

&lt;p&gt;Keepler, una empresa que cuyo producto es una plataforma que administra tus contraseñas. Estudio un conjunto de las contraseñas que han sido hackeadas en el 2016 y descubrieron que 25 contraseñas representan el 50% de las contraseñas obtenidas.&lt;/p&gt;

&lt;p&gt;Las cuales son:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;123456&lt;/li&gt;
&lt;li&gt;123456789&lt;/li&gt;
&lt;li&gt;qwerty&lt;/li&gt;
&lt;li&gt;12345678&lt;/li&gt;
&lt;li&gt;111111&lt;/li&gt;
&lt;li&gt;1234567890&lt;/li&gt;
&lt;li&gt;1234567&lt;/li&gt;
&lt;li&gt;password&lt;/li&gt;
&lt;li&gt;123123&lt;/li&gt;
&lt;li&gt;987654321&lt;/li&gt;
&lt;li&gt;qwertyuiop&lt;/li&gt;
&lt;li&gt;mynoob&lt;/li&gt;
&lt;li&gt;123321&lt;/li&gt;
&lt;li&gt;666666&lt;/li&gt;
&lt;li&gt;18atcskd2w&lt;/li&gt;
&lt;li&gt;7777777&lt;/li&gt;
&lt;li&gt;1q2w3e4r&lt;/li&gt;
&lt;li&gt;654321&lt;/li&gt;
&lt;li&gt;555555&lt;/li&gt;
&lt;li&gt;3rjs1la7qe&lt;/li&gt;
&lt;li&gt;google&lt;/li&gt;
&lt;li&gt;1q2w3e4r5t&lt;/li&gt;
&lt;li&gt;123qwe&lt;/li&gt;
&lt;li&gt;zxcvbnm&lt;/li&gt;
&lt;li&gt;1q2w3e&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Aunque algunos como &amp;ldquo;qwertyuiop&amp;rdquo; o &amp;ldquo;1q2w3e4r&amp;rdquo; se ven seguros al escribirlos en el teclado se demuestra lo inseguros que son.&lt;/p&gt;

&lt;p&gt;Y en la lista hay un par como &amp;ldquo;18atcskd2w&amp;rdquo; o &amp;ldquo;3rjs1la7qe&amp;rdquo; los cuales aunque parecen seguros, parecen ser contraseñas comunes en cuentas bots.&lt;/p&gt;

&lt;p&gt;Personalmente pienso que todo el esquema de uso de contraseñas es una tecnología obsoleta. En todo caso se puede consultar toda la &lt;a href=&#34;https://betanews.com/wp-content/uploads/2017/01/2016-passwords.jpg&#34;&gt;informacion aqui&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>